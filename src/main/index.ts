import { app, BrowserWindow, ipcMain, screen } from 'electron';
// import ip from 'ip';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const APP_WEBPACK_ENTRY: string;
//declare const APP_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // ipcMain.handle('hello', async (event, ...args) => {
  //   const result = ip.address();
  //   return result + '<---+' + args.join('');
  // });
  const { width, height } = screen.getPrimaryDisplay().workAreaSize;
  const mainWindow = new BrowserWindow({
    // webPreferences: {
    //   contextIsolation: true,
    //   preload: APP_PRELOAD_WEBPACK_ENTRY,
    // },
    minHeight: height,
    minWidth: width,
    icon: 'favicon.ico',
  });
  // and load the index.html of the app.
  mainWindow.loadURL(APP_WEBPACK_ENTRY);
  mainWindow.maximize();
  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

app.on('ready', createWindow);
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});
app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
