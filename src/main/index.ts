import { app, BrowserWindow, ipcMain, screen } from 'electron';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const APP_WEBPACK_ENTRY: string;
declare const APP_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    webPreferences: {
      contextIsolation: true,
      nodeIntegration: true, //FIXME disable when fix preload forge
      preload: APP_PRELOAD_WEBPACK_ENTRY,
    },
    width: 400,
    height: 400,
    frame: false,
    transparent: true,
    backgroundColor: '#23315e',
    icon: 'favicon.ico',
  });
  // and load the index.html of the app.
  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
  mainWindow.once('ready-to-show', () => {
    const { width, height } = screen.getPrimaryDisplay().workAreaSize;
    mainWindow.setMinimumSize(width, height);
    mainWindow.maximize();
  });
  mainWindow.loadURL(APP_WEBPACK_ENTRY);
  ipcMain.handle('hello', async (event, ...args) => {
    const result = 'ip.address()';
    mainWindow.minimize();
    return result + '<---+' + args.join('');
  });
};

app.whenReady().then(() => {
  createWindow();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});
if (typeof module !== 'undefined' && module.hot) {
  module.hot.accept(function () {
    console.error('An error occurred while accepting new version');
  });

  module.hot.addStatusHandler((status) => {
    if (status === 'prepare') console.clear();
  });
}
